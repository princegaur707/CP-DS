2 9 -1 4 -1 -1 10 3 -1 -1 -1
2 10 -1 3 -1 -1 9 4 -return p;
	}
	Pair left_subtree = FastDiameter(root->left);
	Pair right_subtree = FastDiameter(root->right);

	p.height = max(left_subtree.height, right_subtree.height) + 1;
	p. diameter = max(left_subtree.diameter, max(right_subtree.diameter,
					left_subtree.height + right_subtree.height));
	return p;
}
int main()
{
	node *root = BuildTree();
	cout << "Preorder: ";
	Preorder(root);
	cout << endl;
	cout << Height(root) << endl;
	Pair p = FastDiameter(root1 -1 -1